// void	ft_check_number(char *tab)
// {
// 	int	i;

// 	i = 0;
// 	while (tab[i] != '\0')
// 	{
// 		while ((tab[i] == '-') || (tab[i] == '+') || (tab[i] >= '0' && tab[i] <= '9'))
// 		{
// 			if (tab[i + 1] == '-' || tab[i + 1] == '+')
// 				{
// 					printf("erreur deux -- or ++\n");
// 					exit (0);
// 				}
// 			i++;
// 		}
// 	}
	
// }

// while (i < ac)
	// {
	// 	ft_check_number(av[i]);
	// 	i++;
	// }
	// i = 1;
	// while (i < ac)
	// {
	// 	tab[j] = ft_atoi(av[i]);
	// 	j++;
	// 	i++;
	// }
	// j = 0;
	// while (j < ac)
	// {
	// 	if (tab[j] == tab[j + 1])
	// 	{
	// 		printf("meme number\n");
	// 		exit (0);
	// 	}
	// 	printf("tab[%d] = %d\n",j,tab[j]);
	// 	j++;
	// }
	


		// for (int i = tab->head_b; i <= tab->last_b; i++)
		// {
		// 	printf("%d\n", tab->tab_b[i]);
		// }
		// sleep(3);
	// for (int i = 0; i <= tab->last_a; i++)
	// {
	// 	printf("|||||||||\n%d\n", tab->tab_a[i]);
	// }

/*	void	ft_algo_100(t_tab *tab)
{
	int	i;
	
	while (tab->last_a > 3)
	{
		ft_stcpy(tab);
		ft_sort_s(tab);
		tab->p1 = tab->last_a / 3;
		printf("p1=%d\n",tab->p1);
		if(tab->p1 < tab->size)
		{	
			tab->p1 = tab->last_a - 3;
			printf("tab->p1 < 10 nv result p1=%d\n",tab->p1);
		}
		tab->p2 = tab->p1 / 2;
		printf("p2=%d\n",tab->p1);
		tab->vp1 = tab->tab_s[tab->p1];
		printf("valeur de p1=%d\n",tab->vp1);
		tab->vp2 = tab->tab_s[tab->p2];
		printf("valeur de p2=%d\n",tab->vp2);
		tab->index = 0;
		while (tab->index <= tab->p1)
		{
			if (tab->tab_a[tab->head_a] <= tab->vp1)
			{
				ft_pb(tab);
				tab->index++;
				printf("index=%d\n",tab->index);
			}
			if (tab->tab_b[tab->head_b] <= tab->vp2 && tab->head_b + 2 <= tab->size)
				ft_rb(tab, 1);
			else
				ft_ra(tab, 1);
		}
	}
	if (tab->last_a <= 2)
		ft_algo_sort_tree(tab);
	i = 0;
	while (i < tab->size)
	{
		printf("tab_b[%d]=%d\n",i,tab->tab_b[i]);
		i++;
	}
	i = 0;
	while (i <= tab->last_a)
	{
		printf("%d\n", tab->tab_a[i]);
		i++;
	}
	printf("i = %d\n",i);
}
*/